import java.io.*;
import java.util.*;

public class APISLAAnalyzer {
    static class RegionMetrics {
        int totalAPIs = 0;
        int slaCrossedCount = 0;
        Set<String> apiSet = new HashSet<>();
        Map<String, Double> apiResponseTimes = new HashMap<>();
        
        public double getSlaCrossedPercentage() {
            return totalAPIs > 0 ? (double) slaCrossedCount / totalAPIs * 100 : 0;
        }
    }
    
    static class ARTMetrics {
        String artName;
        RegionMetrics ukMetrics = new RegionMetrics();
        RegionMetrics usMetrics = new RegionMetrics();
        
        public ARTMetrics(String artName) {
            this.artName = artName;
        }
    }
    
    public static void main(String[] args) {
        // UK files
        String ukResponsePath = "C:\\uk_sheet1.csv";
        String ukSLAPath = "C:\\uk_sheet2.csv";
        
        // US files
        String usResponsePath = "C:\\us_sheet1.csv";
        String usSLAPath = "C:\\us_sheet2.csv";
        
        String outputPath = "C:\\combined_region_summary.csv";
        
        Map<String, ARTMetrics> artMetrics = new TreeMap<>();
        
        try {
            // Process UK data
            processRegionData(ukResponsePath, ukSLAPath, artMetrics, true);
            
            // Process US data
            processRegionData(usResponsePath, usSLAPath, artMetrics, false);
            
            // Write combined analysis
            writeAnalysis(outputPath, artMetrics);
            
        } catch (Exception e) {
            System.out.println("Error in processing: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void processRegionData(String responsePath, String slaPath, 
                                        Map<String, ARTMetrics> artMetrics, 
                                        boolean isUK) throws IOException {
        Map<String, Double> apiSLAMap = new HashMap<>();
        Map<String, String> apiARTMap = new HashMap<>();
        
        // Load SLA definitions
        loadSLADefinitions(slaPath, apiSLAMap, apiARTMap, artMetrics, isUK);
        
        // Process response times
        processResponseTimes(responsePath, apiSLAMap, apiARTMap, artMetrics, isUK);
    }
    
    private static double parseResponseTime(String value) {
        try {
            String cleanValue = value.trim();
            if (cleanValue.startsWith("\"") && cleanValue.endsWith("\"")) {
                cleanValue = cleanValue.substring(1, cleanValue.length() - 1);
            }
            cleanValue = cleanValue.replace(",", "");
            return Double.parseDouble(cleanValue);
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }
    
    private static List<String> parseCSVLine(String line) {
        List<String> values = new ArrayList<>();
        StringBuilder currentValue = new StringBuilder();
        boolean inQuotes = false;
        
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if (c == '"') {
                if (inQuotes && i + 1 < line.length() && line.charAt(i + 1) == '"') {
                    currentValue.append('"');
                    i++;
                } else {
                    inQuotes = !inQuotes;
                }
            } else if (c == ',' && !inQuotes) {
                values.add(currentValue.toString().trim());
                currentValue = new StringBuilder();
            } else {
                currentValue.append(c);
            }
        }
        values.add(currentValue.toString().trim());
        return values;
    }
    
    private static void loadSLADefinitions(String filePath, 
                                         Map<String, Double> apiSLAMap,
                                         Map<String, String> apiARTMap,
                                         Map<String, ARTMetrics> artMetrics,
                                         boolean isUK) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String line = br.readLine(); // Skip header
        
        while ((line = br.readLine()) != null) {
            try {
                List<String> values = parseCSVLine(line);
                if (values.size() >= 3) {
                    String apiName = values.get(0);
                    String artName = values.get(1);
                    double sla = parseResponseTime(values.get(2));
                    
                    apiSLAMap.put(apiName, sla);
                    apiARTMap.put(apiName, artName);
                    
                    ARTMetrics metrics = artMetrics.computeIfAbsent(artName, ARTMetrics::new);
                    RegionMetrics regionMetrics = isUK ? metrics.ukMetrics : metrics.usMetrics;
                    regionMetrics.apiSet.add(apiName);
                    regionMetrics.totalAPIs = regionMetrics.apiSet.size();
                }
            } catch (Exception e) {
                System.out.println("Warning: Error processing SLA definition: " + line);
            }
        }
        br.close();
    }
    
    private static void processResponseTimes(String filePath,
                                           Map<String, Double> apiSLAMap,
                                           Map<String, String> apiARTMap,
                                           Map<String, ARTMetrics> artMetrics,
                                           boolean isUK) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String line = br.readLine(); // Skip header
        Set<String> processedAPIs = new HashSet<>();
        
        while ((line = br.readLine()) != null) {
            try {
                List<String> values = parseCSVLine(line);
                
                if (values.size() >= 6) {
                    String apiName = values.get(0);
                    double responseTime = parseResponseTime(values.get(5));
                    
                    if (apiSLAMap.containsKey(apiName) && !processedAPIs.contains(apiName)) {
                        String artName = apiARTMap.get(apiName);
                        double sla = apiSLAMap.get(apiName);
                        
                        ARTMetrics artMetric = artMetrics.get(artName);
                        if (artMetric != null) {
                            RegionMetrics regionMetrics = isUK ? artMetric.ukMetrics : artMetric.usMetrics;
                            regionMetrics.apiResponseTimes.put(apiName, responseTime);
                            if (responseTime > sla) {
                                regionMetrics.slaCrossedCount++;
                            }
                        }
                        processedAPIs.add(apiName);
                    }
                }
            } catch (Exception e) {
                System.out.println("Warning: Error processing response time: " + line);
            }
        }
        br.close();
    }
    
    private static void writeAnalysis(String outputPath, Map<String, ARTMetrics> artMetrics) 
            throws IOException {
        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(outputPath)));
        
        // Write headers
        pw.println("ART Name,UK Total APIs,UK SLA Crossed,UK SLA Crossed %,US Total APIs,US SLA Crossed,US SLA Crossed %");
        
        // Console header
        System.out.println("\nCombined Region ART Summary Report");
        System.out.println("=====================================================================================");
        System.out.printf("%-15s %-12s %-12s %-12s %-12s %-12s %-12s%n", 
            "ART Name", "UK APIs", "UK Crossed", "UK Cross%", "US APIs", "US Crossed", "US Cross%");
        System.out.println("-------------------------------------------------------------------------------------");
        
        // Write data for each ART
        for (ARTMetrics metrics : artMetrics.values()) {
            double ukCrossedPercent = metrics.ukMetrics.getSlaCrossedPercentage();
            double usCrossedPercent = metrics.usMetrics.getSlaCrossedPercentage();
            
            // Write to file
            pw.printf("%s,%d,%d,%.1f%%,%d,%d,%.1f%%%n",
                metrics.artName,
                metrics.ukMetrics.totalAPIs,
                metrics.ukMetrics.slaCrossedCount,
                ukCrossedPercent,
                metrics.usMetrics.totalAPIs,
                metrics.usMetrics.slaCrossedCount,
                usCrossedPercent);
            
            // Write to console
            System.out.printf("%-15s %-12d %-12d %-12.1f %-12d %-12d %-12.1f%n",
                metrics.artName,
                metrics.ukMetrics.totalAPIs,
                metrics.ukMetrics.slaCrossedCount,
                ukCrossedPercent,
                metrics.usMetrics.totalAPIs,
                metrics.usMetrics.slaCrossedCount,
                usCrossedPercent);
        }
        
        pw.close();
        System.out.println("\nDetailed analysis has been written to: " + outputPath);
    }
}
