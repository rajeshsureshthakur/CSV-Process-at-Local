import java.io.*;
import java.util.*;

public class ARTNameMapper {
    public static void main(String[] args) {
        String sheet1Path = "C:\\sheet1.csv"; // Contains ART name and short name
        String sheet2Path = "C:\\sheet2.csv"; // Contains ART name and other data
        String outputPath = "C:\\mapped_art_data.csv";
        
        try {
            // Load ART name to short name mapping
            Map<String, String> artShortNameMap = loadARTMapping(sheet1Path);
            
            // Process sheet2 and create output with both names
            processAndWriteOutput(sheet2Path, outputPath, artShortNameMap);
            
            System.out.println("Analysis completed. Output file has been generated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static Map<String, String> loadARTMapping(String filePath) throws IOException {
        Map<String, String> mapping = new HashMap<>();
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        
        // Skip header
        String line = br.readLine();
        
        while ((line = br.readLine()) != null) {
            List<String> values = parseCSVLine(line);
            if (values.size() >= 2) {
                String artName = values.get(0).trim();
                String shortName = values.get(1).trim();
                if (!artName.isEmpty() && !shortName.isEmpty()) {
                    mapping.put(artName, shortName);
                }
            }
        }
        
        br.close();
        return mapping;
    }
    
    private static void processAndWriteOutput(String inputPath, String outputPath, 
                                            Map<String, String> artShortNameMap) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(inputPath));
        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(outputPath)));
        
        // Read header
        String headerLine = br.readLine();
        if (headerLine != null) {
            List<String> headerValues = parseCSVLine(headerLine);
            
            // Create new header with both ART Name and Short Name
            List<String> newHeader = new ArrayList<>();
            newHeader.add("ART Name");
            newHeader.add("ART Short Name");
            // Add remaining headers starting from column 2
            for (int i = 1; i < headerValues.size(); i++) {
                newHeader.add(headerValues.get(i));
            }
            writeCSVLine(pw, newHeader);
        }
        
        // Process data lines
        String line;
        while ((line = br.readLine()) != null) {
            List<String> values = parseCSVLine(line);
            if (!values.isEmpty()) {
                List<String> newValues = new ArrayList<>();
                String artName = values.get(0).trim();
                String shortName = artShortNameMap.getOrDefault(artName, "Unknown");
                
                // Add ART name and short name first
                newValues.add(artName);
                newValues.add(shortName);
                
                // Add remaining values starting from column 2
                for (int i = 1; i < values.size(); i++) {
                    newValues.add(values.get(i));
                }
                
                writeCSVLine(pw, newValues);
            }
        }
        
        br.close();
        pw.close();
    }
    
    private static List<String> parseCSVLine(String line) {
        List<String> values = new ArrayList<>();
        StringBuilder currentValue = new StringBuilder();
        boolean inQuotes = false;
        
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if (c == '"') {
                if (inQuotes && i + 1 < line.length() && line.charAt(i + 1) == '"') {
                    currentValue.append('"');
                    i++;
                } else {
                    inQuotes = !inQuotes;
                }
            } else if (c == ',' && !inQuotes) {
                values.add(currentValue.toString().trim());
                currentValue = new StringBuilder();
            } else {
                currentValue.append(c);
            }
        }
        values.add(currentValue.toString().trim());
        return values;
    }
    
    private static void writeCSVLine(PrintWriter pw, List<String> values) {
        for (int i = 0; i < values.size(); i++) {
            String value = values.get(i);
            // Add quotes if value contains comma
            if (value.contains(",")) {
                pw.print("\"" + value + "\"");
            } else {
                pw.print(value);
            }
            
            // Add comma for all except last value
            if (i < values.size() - 1) {
                pw.print(",");
            }
        }
        pw.println();
    }
}
